version: "3.3"
services:
  postgres:
    image: postgres:14.1
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_DB: "${POSTGRES_DB}"
    expose:
      - "5432"
    networks:
      - network
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    logging:
      driver: 'json-file'
      options:
        max-size: 20m

  client:
    image: desbordante_client
    build:
      context: ./web-app/
      dockerfile: Dockerfile-client
      args:
        NEXT_PUBLIC_GOOGLE_ANALYTICS_ENABLED: ${GOOGLE_ANALYTICS_ENABLED}
        NEXT_PUBLIC_GOOGLE_ANALYTICS_TAG_ID: ${GOOGLE_ANALYTICS_TAG_ID}
        SERVER_PROTOCOL: http
        SERVER_IP: server
        SERVER_PORT: ${HOST_SERVER_PORT}
        CMS_PROTOCOL: http
        CMS_IP: cms
        CMS_PORT: 1337
        CMS_API_TOKEN: ${CMS_API_TOKEN}
    ports:
      - "3000:3000"
    expose:
      - "4000"
    environment:
      PORT: 3000
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ENABLED: ${GOOGLE_ANALYTICS_ENABLED}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_TAG_ID: ${GOOGLE_ANALYTICS_TAG_ID}
      NEXT_PUBLIC_PASSWORD_SALT_PREFIX: ${PASSWORD_SALT_PREFIX}
      NEXT_PUBLIC_PASSWORD_SALT_POSTFIX: ${PASSWORD_SALT_POSTFIX}
      SERVER_PROTOCOL: http
      SERVER_IP: server
      SERVER_PORT: ${HOST_SERVER_PORT}
      CMS_PROTOCOL: http
      CMS_IP: cms
      CMS_PORT: 1337
      CMS_API_TOKEN: ${CMS_API_TOKEN}
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./grafana-users:/etc/nginx/grafana_passw
    depends_on:
      - server
      - cms
    networks:
      - network
    restart: always
    logging:
      driver: 'json-file'
      options:
        max-size: 20m

  server:
    image: desbordante_server
    build:
      context: ./web-app/
      dockerfile: Dockerfile-server
    environment:
      IS_IN_DOCKER: 'true'
      DB_NAME: "${POSTGRES_DB}"
      DB_USER: "${POSTGRES_USER}"
      DB_PASSWORD: "${POSTGRES_PASSWORD}"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_FORCE_TABLES_RECREATION: ${DB_FORCE_TABLES_RECREATION}
      USER_DISK_LIMIT_MB: ${USER_DISK_LIMIT_MB}
      NODE_ENV: ${NODE_ENV}
      HOST_SERVER_PORT: "${HOST_SERVER_PORT}"
      HOST_SERVER_IP: "${HOST_SERVER_IP}"
      HOST_SERVER_PROTOCOL: "${HOST_SERVER_PROTOCOL}"
      KAFKA_HOST: kafka
      KAFKA_SERVER_PORT: 9092
      KAFKA_ADMIN_CLIENT_ID: "${KAFKA_ADMIN_CLIENT_ID}"
      KAFKA_TOPIC_NAME: tasks
      MAX_THREADS_COUNT: 8
      SECRET_KEY: ${SECRET_KEY}
      POSTFIX_ENABLED: ${POSTFIX_ENABLED}
      POSTFIX_HOST: postfix
      POSTFIX_EMAIL: ${POSTFIX_EMAIL}
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - kafka
      - python-consumer
      - postfix
    volumes:
      - uploads:/server/uploads/
      - datasets:/server/build/target/input_data/
      - results:/server/results/
    networks:
      - network
    restart: always
    logging:
      driver: 'json-file'
      options:
        max-size: 20m

  cms:
    image: desbordante_cms
    restart: always
    build:
      context: ./web-app/
      dockerfile: Dockerfile-cms
    environment:
      NODE_ENV: production
      DATABASE_CLIENT: ${CMS_DATABASE_CLIENT}
      DATABASE_HOST: postgres_cms
      DATABASE_PORT: 5432
      DATABASE_NAME: ${CMS_DATABASE_NAME}
      DATABASE_USERNAME: ${CMS_DATABASE_USERNAME}
      DATABASE_PASSWORD: ${CMS_DATABASE_PASSWORD}
      JWT_SECRET: ${CMS_JWT_SECRET}
      ADMIN_JWT_SECRET: ${CMS_ADMIN_JWT_SECRET}
      API_TOKEN_SALT: ${CMS_API_TOKEN_SALT}
      APP_KEYS: ${CMS_APP_KEYS}
    ports:
      - "1337:1337"
    volumes:
      - cms-uploads:/cms/public/uploads/
    networks:
      - network
    depends_on:
      - postgres_cms
    logging:
      driver: 'json-file'
      options:
        max-size: 20m

  postgres_cms:
    image: postgres:14.1
    restart: always
    environment:
      POSTGRES_USER: ${CMS_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${CMS_DATABASE_PASSWORD}
      POSTGRES_DB: ${CMS_DATABASE_NAME}
    volumes:
      - cms-data:/var/lib/postgresql/data/
    expose:
      - '5432'
    networks:
      - network
    logging:
      driver: 'json-file'
      options:
        max-size: 20m

  postfix:
    image: desbordante_postfix
    build:
      context: ./web-app/
      dockerfile: Dockerfile-postfix
    environment:
      POSTFIX_RELAY: ${POSTFIX_RELAY}
      POSTFIX_EMAIL: ${POSTFIX_EMAIL}
      POSTFIX_PASS: ${POSTFIX_PASS}
      POSTFIX_ADMINEMAIL: ${POSTFIX_ADMINEMAIL}
    networks:
      - network
    restart: always
    logging:
      driver: 'json-file'
      options:
        max-size: 20m

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    user: root
    expose:
      - "2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - network
    restart: always
    volumes:
      - ./volumes/logs/zk/:/var/lib/zookeeper/log
      - ./volumes/data/zk/:/var/lib/zookeeper/data
    logging:
      driver: 'json-file'
      options:
        max-size: 20m

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    user: root
    expose:
      - '9092'
      - '1234'
    links:
      - 'prometheus'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_LISTENERS: 'PLAINTEXT://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OPTS: '-javaagent:/opt/prometheus/jmx_prometheus_javaagent-0.15.0.jar=1234:/opt/prometheus/kafka_broker.yml'
    depends_on:
      - zookeeper
      - prometheus
    networks:
      - network
    restart: always
    volumes:
      - ./volumes/logs/kafka/:/var/log/kafka
      - ./volumes/data/kafka/:/var/lib/kafka/data
      - ./web-app/prometheus/kafka/:/opt/prometheus/
    logging:
      driver: 'json-file'
      options:
        max-size: 20m

  python-consumer:
    image: desbordante_python-consumer
    build:
      context: ./python-consumer
      dockerfile: Dockerfile
    depends_on:
      - kafka
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - uploads:/server/uploads/
    networks:
      - network
    environment:
      TIMELIMIT: ${CONSUMER_TL_SEC}
      MAX_RAM: ${CONSUMER_ML_MB}
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      MAX_ACTIVE_TASKS: ${MAX_ACTIVE_TASKS}
      DOCKER_NETWORK: desbordante_network
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DBNAME: "${POSTGRES_DB}"
      DB_TASKS_TABLE_NAME: "TasksState"
    restart: always
    logging:
      driver: 'json-file'
      options:
        max-size: 20m

  prometheus:
    image: prom/prometheus
    volumes:
      - ./web-app/prometheus/:/etc/prometheus/
    networks:
      - network
    expose:
      - '9090'
    links:
      - 'grafana'

  node-exporter:
    image: prom/node-exporter
    container_name: monitoring_node_exporter
    restart: always
    networks:
      - network
    expose:
      - 9100
    links:
      - 'prometheus'
    volumes:
      - '/:/host:ro,rslave'
    command:
      - '--path.rootfs=/host'
    pid: host

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: always
    privileged: true
    networks:
      - network
    expose:
      - '8080'
    links:
      - 'prometheus'

  grafana:
    image: grafana/grafana
    networks:
      - network
    expose:
      - '3000'
    volumes:
      - ./volumes/data/grafana/:/var/lib/grafana/
      - ./web-app/grafana/:/etc/grafana/

networks:
  network:

volumes:
  uploads:
    driver: local
    driver_opts:
      type: 'volume'
      o: 'bind'
      device: '${PWD}/volumes/uploads/'
  results:
    driver: local
    driver_opts:
      type: 'volume'
      o: 'bind'
      device: '${PWD}/volumes/results/'
  postgres-data:
    driver: local
    driver_opts:
      type: 'volume'
      o: 'bind'
      device: '${PWD}/volumes/postgres-data/'
  datasets:
    driver: local
    driver_opts:
      type: 'volume'
      o: 'bind'
      device: '${PWD}/volumes/datasets/'
  cms-uploads:
    driver: local
    driver_opts:
      type: 'volume'
      o: 'bind'
      device: '${PWD}/volumes/cms-uploads/'
  cms-data:
    driver: local
    driver_opts:
      type: 'volume'
      o: 'bind'
      device: '${PWD}/volumes/cms-data/'
